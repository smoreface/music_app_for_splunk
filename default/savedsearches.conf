[Earliest Listens with MBID - Lookup Gen Clone]
alert.track = 0
cron_schedule = 0 0 * * *
description = Updates earliestlistensmbid.csv
dispatch.earliest_time = 0
display.general.type = statistics
display.page.search.tab = statistics
enableSched = 1
is_visible = 0
request.ui_dispatch_view = search
search = `lastfm` | stats min(_time) as earliestlisten by artist_mbid | inputlookup earliestlistensmbid.csv append=t | stats min(earliestlisten) as earliestlisten by artist_mbid | eval year = strftime(earliestlisten,"%Y") |outputlookup earliestlistensmbid.csv

[Earliest Listens - Lookup Gen]
alert.track = 0
cron_schedule = 0 11 * * *
is_visible = 0

[Old Bands]
action.email.useNSSubject = 1
alert.track = 0
description = Bands I haven't listened to since the end of 2012
dispatch.earliest_time = 0
display.events.fields = ["host","source","sourcetype","price","productName","Date","Location","Venue","artist","album","artist_mbid","date","play_count","song","recenttracks.track{}.artist.#text","Album"]
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.charting.chart = area
display.visualizations.charting.chart.style = minimal
display.visualizations.custom.type = sankey_diagram_app.sankey_diagram
display.visualizations.show = 0
request.ui_dispatch_app = search
request.ui_dispatch_view = search
search = `lastfm` | stats max(_time) as lastlisten count by artist | search lastlisten<1356912000 count>5 | fieldformat lastlisten = strftime(lastlisten, " %m/%d/%Y %H:%M:%S") | sort -lastlisten,-count

[Track BPM - Lookup Gen]
alert.track = 0
cron_schedule = 0 11 * * *
description = Updates trackbpm.csv
dispatch.earliest_time = -1d
dispatch.latest_time = +0s
enableSched = 1
is_visible = 0
search = index=music sourcetype=itunes_xml | search BPM!="" | inputlookup trackbpm.csv append=t | table BPM,track_name | outputlookup trackbpm.csv

[iTunes Track Length - Lookup Gen]
action.email.useNSSubject = 1
alert.track = 0
cron_schedule = 0 15 * * 4
description = Calculates the time in seconds and a UI time for tracks in an iTunes library
dispatch.earliest_time = 1
dispatch.latest_time = now
display.events.fields = ["host","source","sourcetype","nowplaying"]
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.custom.type = punchcard_app.punchcard
display.visualizations.show = 0
display.visualizations.type = mapping
enableSched = 1
request.ui_dispatch_app = splunk_music_app
request.ui_dispatch_view = search
schedule_window = auto
search = `itunes` | fields track_name, track_length | eval length=round('track_length'/1000), len=tostring(length, "duration") | rex field=len "00:(?<l>\d*:\d*)"| replace "00:" WITH "" IN l | rename l as ui_track_length |inputlookup itunestracklength.csv append=t | table track_name,track_length,ui_track_length |outputlookup itunestracklength.csv

[Artists Discovered in 2018]
action.get_concerts = 1
alert.digest_mode = 0
alert.suppress = 0
alert.track = 0
counttype = number of events
cron_schedule = 0 13 * * *
description = Retrieve concerts for artists discovered in 2019 that have more than 5 listens. Dependent on earliestlistensmbid.csv, generated by Earliest Listens with MBID - Lookup Gen Clone.
dispatch.earliest_time = -1d
dispatch.latest_time = now
display.events.fields = ["host","source","sourcetype","price","productName","Date","Location","Venue","artist","album","artist_mbid","date","play_count","song","recenttracks.track{}.artist.#text","Album","release_date"]
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.charting.chart = area
display.visualizations.charting.chart.style = minimal
display.visualizations.custom.type = sankey_diagram_app.sankey_diagram
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = search
request.ui_dispatch_view = search
search = `lastfm_earliest_mbid`\
| search earliestyear=2019\
| stats count by artist_mbid\
| where count>5

[Average Concert Threshold]
action.email.useNSSubject = 1
action.lookup = 1
action.lookup.filename = concert_threshold.csv
alert.track = 0
cron_schedule = 0 12 * * 1
description = Average listens for all artists I've seen live
dispatch.earliest_time = 0
display.events.fields = ["host","source","sourcetype","price","productName","Date","Location","Venue","artist","album","artist_mbid","date","play_count","song","recenttracks.track{}.artist.#text","Album"]
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.charting.chart = line
display.visualizations.charting.chart.style = minimal
display.visualizations.custom.type = sankey_diagram_app.sankey_diagram
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = search
request.ui_dispatch_view = search
search = `lastfm` | search [|inputlookup concerts.csv | makemv artist delim="," | mvexpand artist | table artist] | stats count by artist | stats avg(count) as threshold | eval threshold=floor(threshold) | outputlookup artistthreshold.csv

[Earliest Listens - Lookup Gen Clone]
alert.track = 0
cron_schedule = 0 11 * * *
description = Updates earliestlistens.csv
dispatch.earliest_time = -1d
dispatch.latest_time = +0s
enableSched = 1
is_visible = 0
search = `lastfm` | stats min(_time) as earliestlisten by artist | inputlookup earliestlistens.csv append=t | stats min(earliestlisten) as earliestlisten by artist | eval year = strftime(earliestlisten,"%Y") | outputlookup earliestlistens.csv

[Track Release Date - Lookup Gen]
action.email.useNSSubject = 1
action.webhook.enable_allowlist = 0
alert.track = 0
cron_schedule = 0 13 * * 1
description = Generates a release date by track name lookup so that I can do things fast
dispatch.earliest_time = -7d@h
dispatch.latest_time = now
enableSched = 1
search = index=music sourcetype="itunes_xml" | fields track_name,artist,release_date | eval release_date=round(strptime(release_date, "%Y-%m-%dT%M:%S:%fZ"))  |inputlookup track_release.csv append=t | table artist,track_name,release_date | outputlookup track_release.csv
